#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#pragma warning(disable : 4996)

FILE* v(int *w)
{
	FILE* subor;
	if ((subor = fopen("autobazar.txt", "r")) == NULL)
	{
		printf("Neotvoreny subor");
		return 0;
	}
	char p[256];
	int r = 0;
	double d = 1;
	while (fgets(p, 256, subor) != NULL) { //precitanie zaznamu a vypis do konzole
		if		(d == 1) { printf("meno a priezvisko: %s", p);}
		else if (d == 2) { printf("SPZ: %s", p); r++; }
		else if (d == 3) { printf("typ auta: %s", p); }
		else if (d == 4) { printf("cena: %.2lf\n", atof(p)); }
		else if (d == 5) { printf("datum: %s\n", p); d = -1; }
		d++;
		
	}
	*w = r;//r je pocet zaznamov. spocital som ich tu, aby som si mohol vytvorit neskor dynamicke pole v maine
	return subor; //vratim otvoreny subor (ktory som precital a je na konci)
}
FILE* v(int *w)
{
	FILE* subor;
	if ((subor = fopen("autobazar.txt", "r")) == NULL)
	{
		printf("Neotvoreny subor");
		return 0;
	}
	char p[256];
	int r = 0;
	double d = 1;
	while (fgets(p, 256, subor) != NULL) { //precitanie zaznamu a vypis do konzole
		if		(d == 1) { printf("meno a priezvisko: %s", p);}
		else if (d == 2) { printf("SPZ: %s", p); r++; }
		else if (d == 3) { printf("typ auta: %s", p); }
		else if (d == 4) { printf("cena: %.2lf\n", atof(p)); }
		else if (d == 5) { printf("datum: %s\n", p); d = -1; }
		d++;
		
	}
	*w = r;//r je pocet zaznamov. spocital som ich tu, aby som si mohol vytvorit neskor dynamicke pole v maine
	return subor; //vratim otvoreny subor (ktory som precital a je na konci)
}
void o(FILE* x) //posuniem do funkcie otvoreny subor
{
	rewind(x); //vratim sa na zaciatok suboru
	int d = 1;
	char l[256]; //precitanie zadanej hodnoty datumu 
	char p[256];
	int a, a1, b, b1, c, c1;
	double o;
	char pole[5][256]; //meno,spz,znacka,cena,typ auta
	scanf("%s", &l);
	a = (l[0]- '0') * 1000 + (l[1] - '0') * 100 + (l[2] - '0') * 10 + (l[3] - '0');  
	b = (l[4] - '0') * 10 + (l[5] - '0');
	c = (l[6] - '0') * 10 + (l[7] - '0');  //prepis datumu zo zadaneho datumu,z pola char na int
	while (fgets(p, 256, x) != NULL) {
		if (d == 1)		 { p[strlen(p) - 1] = 0; strcpy(pole[0], p);} //vymazanie znaku noveho riadku v p a prekopirovanie zaznamov do pola
		else if (d == 2) { p[strlen(p) - 1] = 0; strcpy(pole[1], p); }
		else if (d == 3) { p[strlen(p) - 1] = 0; strcpy(pole[2], p); }
		else if (d == 4) { p[strlen(p) - 1] = 0; strcpy(pole[3], p); }
		else if (d == 5) { p[strlen(p) - 1] = 0; strcpy(pole[4], p); d = -1;
		a1 = (p[0] - '0') * 1000 + (p[1] - '0') * 100 + (p[2] - '0') * 10 + (p[3] - '0');
		b1 = (p[4] - '0') * 10 + (p[5] - '0');
		c1 = (p[6] - '0') * 10 + (p[7] - '0');
			if ((a - a1 >= 2) || (a-a1==1 && b-b1>=1) || (a - a1 == 1 && b - b1 >= 0 && c-c1>=0)) //porovnanie aktualneho datumu s datumom kedy zamestnanec zacal pracovat
		{ 
			if (strcmp(pole[2], "1")==0) { o = atof(pole[3])/100*2.3; } //nove auto? provizia 2.3%, stare 5.1%
			else{ o = atof(pole[3]) / 100 * 5.1; } 
			 
			
			printf("%s %s %.2lf\n", &pole[0], &pole[1], o); //samotny vypis na konzolu
		}
		}
		d++;

	}
	
}
char** n(FILE* x, int *i) {

	
	char p[256];
	int d, r,k;
	d = 1;
	r = 1;
	rewind(x);
	while (fgets(p, 256, x) != NULL) {
		if (d == 2) {
			r++; //spocitanie zaznamov
		}
		if (d == 5) d = -1;
		d++;
		
	}
	rewind(x);
	char** arr; //deklaracia dvojrozmerneho dynamickeho pola

	arr = malloc(sizeof(char*) * r); //dynamicke alokovanie pola pola charov
	r = 0;
	d = 1;
	while (fgets(p, 256, x) != NULL) {
		if (d == 2) {
			arr[r] = malloc(sizeof(char) * 7); //dynmacike inicializovanie samostatnych "stringov" (polia charov)
			strcpy(arr[r], p); //prekopirovanie SPZ do pola
			r++;
		}
		if (d == 5) d = -1;
		d++;

	}
	k = 1; //pole bolo alokovane
	*i = k;
	return arr;

}
}	
	if (c == 0) {
		for (int i = 0; i < l; i++)
		{
			for (int j = 0; j <= 6; j++)
			{
				if (j == 0) printf("%c", arr[i][j]);
				if (j == 1) printf("%c ", arr[i][j]);
				if (j == 2) printf("%c", arr[i][j]);
				if (j == 3) printf("%c", arr[i][j]);
				if (j == 4) printf("%c ", arr[i][j]);
				if (j == 5) printf("%c", arr[i][j]);
				if (j == 6) printf("%c\n", arr[i][j]); //vypis spz v tvare "XX XXX XX"

			}
		}
	}
void m(char** arr, int l)
{
	char asci[127]; // vsetky prvky asci
	char pocet[127]; //pocet vsetkych prvkov
	char c;
	for (int i=0; i < 127; i++)
	{
		asci[i] = i; //zapis prvkov do asci
		pocet[i] = 0; //zapis 0 na vsetky miesta poctu samostatnych znakov
	}	
			for (int j = 0; j < l; j++)
		{
			for (int k = 0; k <= 6; k++)
			{
				for (int i = 0; i < 127; i++)
				{
					if (arr[j][k] == asci[i]) { pocet[i]+=1; } //spocitanie kolkokrat sa opakuje 1 pismeno v poli a zvysenie jeho poctu na prislusnom mieste
				}
			}
		}
		int max = 0;
		for (int i = 0; i < 127; i++)
		{
			if (pocet[i] > max) 
			{
				c = asci[i]; //zapamatam si aky znak sa najviac opakuje
				max = pocet[i]; //zapamatam si kolkokrat sa opakuje
			}
		}
		printf("%c %d\n", c, max); //samotny vypis najviac opakovaneho znaku a jeho pocet
}
	
int main() {
		
		
		
		int l = 0;
	    FILE* ot; 
		ot = NULL;
		int k = 0; //false, pole nebolo alokovane
		char** arr; //deklaracia dynmickeho pola, ktoremu sa venujem vo funkcii n
		arr = NULL;
		char c;
		while ((scanf("%c", &c))) //scan vstupu
		{
			if (c == 'v')
			{
				ot = v(&l);
				
			}
		
				if (c == 'o' && ot != NULL)
			{
				o(ot);
			}
				if (c == 'n' && ot!=NULL)
			{	
				
				arr = malloc(sizeof(char*) * l); //l bolo nacitane v prvej funkcii-pocet zaznamov,velkost pola.
		
				if (k == 1) { free(arr); } //ak uz bolo pole alokovane, uvolnim pamet.
				arr=n(ot, &k);
			}
			if (c == 's')
			{
				if (arr == NULL) printf("Pole nie je vytvorene\n");
				else s(arr, l, nove);
			}
			if (c == 'm')
			{
				if (arr == NULL) printf("Pole nie je vytvorene\n");
				else m(arr, l);
			}
		 

		}
	return 0;
}